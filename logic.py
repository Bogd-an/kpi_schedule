import json
from pymongo import MongoClient
from datetime import datetime
from requests import get as req_get

BOT_VERSION='0.5'

db = MongoClient('localhost', 27017).telegram_bot

COMMAND_LIST = {
    'today':    [['—Å—å–æ–≥–æ–¥–Ω—ñ', 'today', 'td'],
        ['–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–∫–ª–∏–∫—É —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ']],
    'tomorrow': [['–∑–∞–≤—Ç—Ä–∞', 'tomorrow', 'tm'],
        ['–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–∫–ª–∏–∫—É —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞']],
    'week':     [['—Ç–∏–∂–¥–µ–Ω—å', 'week', 'w'],
        ['–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–∫–ª–∏–∫—É —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å']],
    'nextweek': [['–Ω–∞—Å—Ç—Ç–∏–∂–¥', 'nextweek', 'nw'],
        ['–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–∫–ª–∏–∫—É —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å']],
    'timetable':[['–¥–∑–≤—ñ–Ω–∫–∏', 'timetable', 'tt'],
        ['–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–∫–ª–∏–∫—É —Ä–æ–∑–∫–ª–∞–¥—É –¥–∑–≤—ñ–Ω–∫—ñ–≤']],
    'help':     [['–¥–æ–ø–æ–º–æ–≥–∞', 'help', 'h'],
        ['–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–∫–ª–∏–∫—É –¥–æ–ø–æ–º–æ–≥–∏, –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —ñ–Ω—à—É –∫–æ–º–∞–Ω–¥—É']],
    'group':    [['–≥—Ä—É–ø–∞', 'group', 'g'],
        ['–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏, –∑–≥—ñ–¥–Ω–æ —è–∫–æ—ó –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º–µ—Ç—å—Å—è —Ä–æ–∑–∫–ª–∞–¥.',
         '–©–æ–± —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—å –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –∫–æ–º–∞–Ω–¥—É: /–≥—Ä—É–ø–∞ –ù–ê–ó–í–ê-–ì–†–£–ü–ò']],
    'personal': [['–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π', 'personal','p'],
        ['–ó–∞—Ä–∞–∑ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ',
         '–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –≤–ª–∞—Å–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤',
         '–ú–æ–∂–µ—Ç–µ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è–º —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞ <a href="github.com//Bogd-an//kpi_schedule">github</a>']],
    'info':     [['—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', 'info', 'i'],
        ['–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –¥–µ–±–∞–≥—É']],
}

COMMAND = dict(zip(tuple(COMMAND_LIST.keys()), [row[0] for row in COMMAND_LIST.values()]))

HELP_STRING = '\n'.join(
    ['*–ü—Ä–æ—Å—Ç–æ –±–æ—Ç –¥–ª—è –ö–ü–Ü—à–Ω–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É*\n'] +
    [' –∞–±–æ '.join([f'/{i}' for i in row]) for row in COMMAND.values()]
)

TIMETABLE = '''
1 –ø–∞—Ä–∞  08:30 - 10:05
2 –ø–∞—Ä–∞  10:25 - 12:00
3 –ø–∞—Ä–∞  12:20 - 13:55
4 –ø–∞—Ä–∞  14:15 - 15:50
5 –ø–∞—Ä–∞  16:10 - 17:45
'''

def get_help(text: str) -> str:
    text = text.split()
    if len(text) == 1:
        return HELP_STRING[:-64]
    if len(text) != 2:
        return '–ü–æ–º–∏–ª–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç'
    text = text[1]
    if text[0] == '/':
        text = text[1:]
    for x in COMMAND_LIST:
        if text in COMMAND_LIST[x][0]:
            return '\n'.join(COMMAND_LIST[x][1])
    return '–ö–æ–º–∞–Ω–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'

def get_group(chat_id, text):

    text = text.split()
    if len(text) != 2:
        return '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –Ω–∞–∑–≤–∞ –≥—Ä—É–ø–∏. –í–≤–µ–¥—ñ—Ç—å –∑–≥—ñ–¥–Ω–æ –ø—Ä–∏–∫–ª–∞–¥—É: /–≥—Ä—É–ø–∞ –ê–ë-01'

    group_info = db.groups.find_one({'name': text[1].upper()})

    if group_info == None:
        return '–ì—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–≥—ñ–¥–Ω–æ –ø—Ä–∏–∫–ª–∞–¥—É: /–≥—Ä—É–ø–∞ –ê–ë-01'

    if db.chats.find_one({'chat_id': chat_id}) == None:
        db.chats.insert_one({'chat_id': chat_id, 'group':group_info['name'], 'groupCode': group_info['id']})
    else:
        db.chats.update_one({'chat_id':chat_id}, {'$set': {'groupCode': group_info['id']}})
    
    return f'–ì—Ä—É–ø—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç {group_info["faculty"]} –ú–æ–∂–µ—Ç–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—å –∫–æ–º–∞–Ω–¥–æ—é /td'


def get_today(chat_id:str, table='chats') -> str:
    return '\n'.join(
        schedule_answer(chat_id, week_now(), day_now(), table=table)
    )


def get_tomorrow(chat_id:str, table='chats') -> str:
    week, day = week_now(), day_now()
    day = day + 1 if day != 6 else 0
    if day == 0:
        week = 'scheduleFirstWeek' if week == 'scheduleSecondWeek' else 'scheduleSecondWeek'
    return '\n'.join(
        schedule_answer(chat_id, week, day, table=table)
    )


def get_week(chat_id:str, table='chats') -> str:
    return '\n'.join(
        schedule_answer(chat_id, week_now(), table=table)
    )


def get_nextweek(chat_id:str, table='chats') -> str:
    week = 'scheduleFirstWeek' if week_now() == 'scheduleSecondWeek' else 'scheduleSecondWeek'
    return '\n'.join(
        schedule_answer(chat_id, week, table=table)
    )

def get_info(message_chat_id:str) -> str:
    print(db.chats.find_one({'chat_id': message_chat_id}))
    return '\n'.join(
        [
            f'–ó–∞—Ä–∞–∑ {day_now()+1} –¥–µ–Ω—å —Ç–∏–∂–Ω—è',
            f'–†–æ–∑–∫–ª–∞–¥ –∑–≥—ñ–¥–Ω–æ {week_now()}',
            f'–†–æ–∑–∫–ª–∞–¥ –≥—Ä—É–ø–∏ '+db.chats.find_one({'chat_id': message_chat_id})['group'],
            f'BOT VERSION={BOT_VERSION}'
        ]
    )


def schedule_answer(message_chat_id:str, week:str, day=None, table='chats') -> list:
    groupCode = db[table].find_one({'chat_id': message_chat_id})['groupCode']
    result = db.schedules.find_one({'groupCode': groupCode})[week]
    text = []
    if day == 6: return ['–ù–µ–¥—ñ–ª—è, –≤–∏—Ö—ñ–¥–Ω–∏–πü•≥']
    if day != None: result = [result[day]]
    for res in result:
        text.append(f"     `{res['day']}`")
        for pair in res['pairs']:
            text.append(f"{pair['type']+': ' if pair['type'] != '' else ''}*{pair['time']}*")
            text.append(f"_{pair['name']}_")
            if pair['teacherName'] != '':
                word_ending = '–∫–∞' if pair['teacherName'].split()[1][-1] in '–∞—è' else ''
                text.append(f"–õ–µ–∫—Ç–æ—Ä{word_ending}: {pair['teacherName']}")
            text.append('')
        if day == None: text.append('')
    if text[-2] == '     `\u0421\u0431`' and len(text) > 3:
        del text[-2]
    return text


def week_now() -> str:
    return ('scheduleFirstWeek', 'scheduleSecondWeek'
            )[(datetime.utcnow().isocalendar()[1]) % 2]
#        [req_get('https://schedule.kpi.ua/api/time/current').json()['data']['currentWeek']]

def day_now() -> int:
    return datetime.weekday(datetime.now())
#    return req_get('https://schedule.kpi.ua/api/time/current').json()['data']['currentDay']


